import math
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

# Locations: [(x, y), ...]
locations = [(0, 0), (2, 3), (5, 1), (6, 4), (1, 2)]  # Example locations
priorities = ['high', 'medium', 'high', 'low', 'medium']  # Example priorities

# Function to calculate Euclidean distance between two points (x1, y1) and (x2, y2)
def calculate_distance(loc1, loc2):
    return math.sqrt((loc1[0] - loc2[0]) ** 2 + (loc1[1] - loc2[1]) ** 2)

# Function to create the distance matrix from the locations
def create_distance_matrix(locations):
    num_locations = len(locations)
    distance_matrix = []
    for i in range(num_locations):
        row = []
        for j in range(num_locations):
            if i == j:
                row.append(0)
            else:
                dist = calculate_distance(locations[i], locations[j])
                row.append(dist)
        distance_matrix.append(row)
    return distance_matrix

# Function to create the routing model
def create_routing_model(distance_matrix):
    num_locations = len(distance_matrix)
    manager = pywrapcp.RoutingIndexManager(num_locations, 1, 0)  # 1 vehicle, start at 0

    routing = pywrapcp.RoutingModel(manager)

    # Create a transit callback (distance function)
    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return distance_matrix[from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc (distance).
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Define search parameters.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    return routing, manager, search_parameters

# Function to solve the route optimization problem
def solve(distance_matrix, locations):
    routing, manager, search_parameters = create_routing_model(distance_matrix)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    if solution:
        print_solution(routing, solution, manager, locations)
    else:
        print("No solution found!")

# Function to print the optimized route
def print_solution(routing, solution, manager, locations):
    optimized_route = []
    total_distance = 0
    index = routing.Start(0)
    
    while not routing.IsEnd(index):
        node_index = manager.IndexToNode(index)
        optimized_route.append(locations[node_index])
        previous_index = index
        index = solution.Value(routing.NextVar(index))
        total_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    
    # Print the optimized route and the total distance
    print(f"Optimized Route: {optimized_route}")
    print(f"Total Distance: {total_distance:.2f} units")

# Create the distance matrix based on the provided locations
distance_matrix = create_distance_matrix(locations)

# Solve the problem
solve(distance_matrix, locations)
